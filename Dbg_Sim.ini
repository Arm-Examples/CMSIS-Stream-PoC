/******************************************************************************/
/* Dbg_Sim.ini: Simulator Initialization File                                 */
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2010 - 2016 Keil Software. All rights reserved.              */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/

/*------------------------------------------------------------------------------
  Generate constant signal with period of 3 windows
 *------------------------------------------------------------------------------*/
signal void Square (int nb)  {
  int   id;
  float dt;
  

  id = 0;
  dt = 1.0*nb / 32000.0;

  for (;;) {                              

    id = (int)(1.0*STATES / CCLK / dt);
    id = id % 6;
    AIN2 =  0.5*id;            
    swatch (0.00001);                     

  }                                       

}

/*------------------------------------------------------------------------------
  Generate sine wave signal
    a  = amplitude of sine wave
    f  = frequency of sine wave
 *------------------------------------------------------------------------------*/
signal void Sine (float a, float f)  {
  float   sin;
  float   w;

  for (;;) {                              // do forever

    w    = 2 * 3.1415926 * f;
    sin  = __sin ( ((double)STATES / CCLK) * w);

    AIN2 =  ((sin * a)) + 1.6;            // set analog value
    swatch (0.00001);                     // in 10 uSec resolution

  }                                       // end do forever

}



/*------------------------------------------------------------------------------
  Generate mixed sine wave signal
    a   = amplitude of mixed sine wave
    f1  = frequency of sine wave 1
    f2  = frequency of sine wave 2
 *------------------------------------------------------------------------------*/
signal void SineMix (float a, float f1, float f2)  {
  float   sin1;
  float   sin2;
  float   w;

  for (;;) {                              // do forever

    w    = 2 * 3.1415926 * f1;
    sin1 = __sin ( ((double)STATES / CCLK) * w);
    w    = 2 * 3.1415926 * f2;
    sin2 = __sin ( ((double)STATES / CCLK) * w);

    AIN2 =  (((sin1 + sin2) * a)) + 1.6;  // set analog value
    swatch (0.00001);                     // in 10 uSec resolution

  }                                       // end do forever

}


/*------------------------------------------------------------------------------
  Generate sweep sine wave signals
    a  = amplitude of sine wave
    fs = start frequency for sweep
    fe = end frequency for sweep
 *------------------------------------------------------------------------------*/
SIGNAL void SineSweep (float a, float fs, float fe) {
  float  fsample;                         // sample frequency
  float  tSweep;                          // duration for sweep   
  float  eSweep;
  float  sin;
  float  K;
  float  L;
  float  step, t2;


  fsample = 100000;                       //  1 / 10us
  tSweep  = 0.10;                         //  sweep is finished in 0.10 s

  eSweep = fsample * tSweep;

  for (;;) {                              // do forever

    L  = ((double)tSweep / __log(fe / fs));
    K  = 2 * 3.1415926 * fs * L;

    for (step = 0; step < eSweep; ++step) {
      t2   = step / fsample;
      sin  = __sin(K * (__exp(t2 / L) - 1));

      AIN2 = ((sin * a)) + 1.6;           // set analog value
      swatch (0.00001);                   // in 10 uSec resolution

    }


    L  = ((double)tSweep / __log(fs / fe));
    K  = 2 * 3.1415926 * fe * L;

    for (step = 0; step < eSweep; ++step)   {
      t2   = step / fsample;
      sin  = __sin(K * (__exp(t2 / L) - 1));

      AIN2 = ((sin * a)) + 1.6;           // set analog value
      swatch (0.00001);                   // in 10 uSec resolution

    }

  }                                       // end do forever

}




AIN2 = 1.6

KILL BUTTON *

DEFINE BUTTON "Mixed Sine Signal", "SineMix   (1.0, 2000.0, 14000.0)"
DEFINE BUTTON "Mixed Sine Stop",   "SIGNAL KILL SineMix"
DEFINE BUTTON "Sweep Sine Signal", "SineSweep (1.0, 2500.0, 9700.0)"
DEFINE BUTTON "Sweep Sine Stop",   "SIGNAL KILL SineSweep"
DEFINE BUTTON "Square Signal", "Square(256)"
DEFINE BUTTON "Square Stop",   "SIGNAL KILL Square"
